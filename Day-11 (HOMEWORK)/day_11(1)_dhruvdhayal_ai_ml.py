# -*- coding: utf-8 -*-
"""Day-11(1)_DHRUVDHAYAL_AI.ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_CNTvjXMTObss5CjJCHVZjZeaPsTJXBV

#Regression Analysis.
"""

#Now, we are Importing all the Libraries.
from sklearn import datasets;
from sklearn import linear_model;
from sklearn import metrics;
from sklearn import model_selection;

#Now, we Load the Values of the Datasets.
data=datasets.load_diabetes();

#Now, we have to show the Values of the Data.
print(data.data);
print("\n 1. Total Number of Features of the Data Values are: ",data.feature_names);

#Now, we have to show the Type of the DataValues.
import numpy as np;
import pandas as pd;
import matplotlib as plt;

#Now, we have to swap the values for the Simplicity!
diabetes=data.data;
print("\n 1. Type of the Datasets Diabetes: ",type(diabetes));
print("\n 2. Type of the Datasets diabetes.target: ",type(data.target));
feature_names=data.feature_names;
print("\n 3. Type of the Datasets feature_names: ",type(feature_names));

#Now, convert the data it into the DataFrames.
dfDia=pd.DataFrame(data=diabetes,columns=feature_names);
dfDia.head();

#Now, we have to show the values of the Coorelations.
cor1=dfDia.corr();
print(cor1);

#Now, we have to visualise the values of the Datasets.
import seaborn as sns;
import matplotlib.pyplot as plt;
plt.figure(1,figsize=(6,6));
sns.heatmap(cor1,annot=True);

#Visualising the Values in the form of the PairPlot.
newData=dfDia.drop(['age','sex','bmi','bp'],axis=1,inplace=False);
corNew=newData.corr();
plt.figure(1);
sns.pairplot(corNew,kind='reg');

#Now, we need to train the model and make the Linear Regression Model.
#Take 'BMI' as Dependent Variable and 's6' is the Independent Variable.
X=dfDia['s6'].values; #Independent Variable.
y=dfDia['bmi'].values;  #Dependent Variable.

#If the Single Independent Variable is Considered.
X=X.reshape(-1,1);
#Now, we have to split it into training and testing phases.
ratio=0.3;
Xtrain,Xtest,ytrain,ytest=model_selection.train_test_split(X,y,test_size=ratio,random_state=7);
print(Xtrain.shape,ytrain.shape);
print(Xtest.shape,ytest.shape);

#Now, creating the values of the Linear_Models.
lnModel=linear_model.LinearRegression();
#Now, we have to train the Model.
lmModel=lnModel.fit(Xtrain,ytrain);
#Now, we have to predict the values by using the testing-Training.
ypredTrn = lmModel.predict(Xtrain) # Assign the result of prediction to ypredTrn
#Now, we have to predict the values based on the Testing Phases.
ypredTst = lmModel.predict(Xtest) # Assign the result of prediction to ypredTst
#Metrics.
r2ScoreTrain =metrics.r2_score(ytrain,ypredTrn)
r2ScoreTest =metrics.r2_score(ytest,ypredTst)
print('Training r2 value:',r2ScoreTrain)
print('Testing r2 value:',r2ScoreTest)

#Now, we have to visualise the values of the Data.
plt.figure(1);
plt.title("Original Datasets Values");
plt.scatter(Xtest,ytest);
plt.plot(Xtest,ypredTst,'--r',linewidth=3);
plt.show();

"""#Now, we Importing the Values of the (NEW DATASETS)-"California_Housing"
"""

#Importing ther values of the Data.
from sklearn import datasets;
from sklearn import linear_model;
from sklearn import metrics;
from sklearn import model_selection;

#Now, we have to import the Values of the Datasets.
newData=datasets.fetch_california_housing();

#Now, we have to show the Values of the Data.
print("\n 1. Values of the Feature Names: ",newData.feature_names);
print("\n--------------------------------------------------------------");

print("\n 2. Values of the Data: \n",newData.data);
print("\n--------------------------------------------------------------");

print("\n 3. Describe the Values of the Data: ",newData.DESCR);
print("\n--------------------------------------------------------------");

print("\n 4. Values of the Target: ",newData.target);
print("\n--------------------------------------------------------------");

print("\n 5. Name of the Valuable Targets: ",newData.target_names);
print("\n--------------------------------------------------------------");

#Now, we conver the Data it into the DataFrames.
dfNew2=pd.DataFrame(data=newData.data,columns=newData.feature_names);
dfNew2['MedHouseValue']=newData.target;
dfNew2.head();

#Now, making the values of the Coorelations.
cor2=dfNew2.corr();
print(cor2);

#Now, we have to visualise the values by using the heatmap properties.
import seaborn as sns;
import matplotlib.pyplot as plt;
plt.figure(1,figsize=(6,6));
sns.heatmap(cor2,annot=True);

newData2 = dfNew2.drop(['Longitude','Latitude','Population','AveOccup'],axis=1,inplace=False)
cor2New = newData2.corr() # Use the correct DataFrame and method name
plt.figure(1)
sns.pairplot(cor2New,kind ='reg')

"""#Converting the Data it into the DataFrames."""

newHousing = pd.DataFrame(newData.data,columns=newData.feature_names)
newHousing['MedHouseVal'] = newData.target
newHousing.head()

# correlation
Newcor = newHousing.corr()
plt.figure(2,(6,6))
sns.heatmap(Newcor,annot=True)

# normal linear regression (simple linear regression)
#now create the linear model
# where BMI is the dependent variable and s5 as the independent variable
X = newHousing['MedInc','HouseAge','AveRooms,AveBedrms'].values # independent variable
y = newHousing['MedHouseVal'].values # dependent variable

# if single independent variable is considered
X = X.reshape(-1,1);
# split the data into train and test
ratio= 0.3;
[Xtrain,Xtest,ytrain,ytest] = model_selection.train_test_split(
    X,y,test_size=ratio,random_state=5
);

print(Xtrain.shape,ytrain.shape);
print(Xtest.shape,ytest.shape);

# create the linear model
lnModel = linear_model.LinearRegression()
# train the model using train data
lnModel = lnModel.fit(Xtrain,ytrain)
# predict the xtrain data
ypredTrn = lnModel.predict(Xtrain)
# predict the xtest data
ypredTst = lnModel.predict(Xtest)
# metrics
r2ScoreTrain =metrics.r2_score(ytrain,ypredTrn)
r2ScoreTest =metrics.r2_score(ytest,ypredTst)
print('Training r2 value:',r2ScoreTrain)
print('Testing r2 value:',r2ScoreTest)

newHousing.columns

# normal linear regression (simple linear regression)
#now create the linear model
# where BMI is the dependent variable and s5 as the independent variable
X = newHousing[['MedInc','HouseAge','AveRooms','AveBedrms']].values # independent variable. Use a list of column names
y = newHousing['MedHouseVal'].values # dependent variable

# if single independent variable is considered
#X = X.reshape(-1,1); # Commenting out for multiple linear regression
# split the data into train and test
ratio= 0.3;
[Xtrain,Xtest,ytrain,ytest] = model_selection.train_test_split(
    X,y,test_size=ratio,random_state=5
);

print(Xtrain.shape,ytrain.shape);
print(Xtest.shape,ytest.shape);

# create the linear model
lnModel = linear_model.LinearRegression()
# train the model using train data
lnModel = lnModel.fit(Xtrain,ytrain)
# predict the xtrain data
ypredTrn = lnModel.predict(Xtrain)
# predict the xtest data
ypredTst = lnModel.predict(Xtest)
# metrics
r2ScoreTrain =metrics.r2_score(ytrain,ypredTrn)
r2ScoreTest =metrics.r2_score(ytest,ypredTst)
print('Training r2 value:',r2ScoreTrain)
print('Testing r2 value:',r2ScoreTest)

# multiple linear regression
#now create the linear model
# where BMI is the dependent variable and s5 as the independent variable
X = newHousing[['MedInc']].values # independent variable
y = newHousing['MedHouseVal'].values # dependent variable

# if single independent variable is considered
X = X.reshape(-1,1)
# split the data into train and test
ratio= 0.3
[Xtrain,Xtest,ytrain,ytest] = model_selection.train_test_split(
    X,y,test_size=ratio,random_state=5
)

print(Xtrain.shape,ytrain.shape)
print(Xtest.shape,ytest.shape)

# create the linear model
lnModel = linear_model.LinearRegression()
# train the model using train data
lnModel = lnModel.fit(Xtrain,ytrain)
# predict the xtrain data
ypredTrn = lnModel.predict(Xtrain)
# predict the xtest data
ypredTst = lnModel.predict(Xtest)
# metrics
r2ScoreTrain =metrics.r2_score(ytrain,ypredTrn)
r2ScoreTest =metrics.r2_score(ytest,ypredTst)
print('Training r2 value:',r2ScoreTrain)
print('Testing r2 value:',r2ScoreTest)

newHousing.columns

#Now, we have to visualise the values of the Data.
plt.figure(1);
plt.title("Original Datasets Values");
plt.scatter(Xtest,ytest);
plt.plot(Xtest,ypredTst,'--r',linewidth=3);
plt.show();

"""----------------------------------- Day-11 (File No: 1) ------------------------"""

