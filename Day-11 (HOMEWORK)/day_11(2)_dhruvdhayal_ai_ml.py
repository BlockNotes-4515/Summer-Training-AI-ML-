# -*- coding: utf-8 -*-
"""Day-11(2)_DHRUVDHAYAL_AI/ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IVY98FgtQcWXpg4oO_Es0KggH3kdl6NL

#Regression Analysis.
"""

#Importing all the Inbuilt Libraries.
from sklearn import datasets;
from sklearn import linear_model;
from sklearn import metrics;
from sklearn import model_selection;

#Importing the Other pre-defined Libraries.
import pandas as pd;
import numpy as np;
import matplotlib.pyplot as plt;
import seaborn as sns;

#Imorting the Values of the Datasets.
path='/content/Ecommerce Customers.csv';
data=pd.read_csv(path);

#Showing the Values of the Data.
print("\n 1. Values of the Data: ",data);
print("\n---------------------------------");
print("\n 2. Feature Values: ",data.columns);

#Printing and showing the values of the data information and descriptions.
print(data.info);
print("\n--------------------");
print(data.describe());

#Now, we need to convert the data it into the DataFrames.
features_names=data.columns;
dfDfd=pd.DataFrame(data=data,columns=features_names);
dfDfd.head();

#Now, we need to calculate the coorelation Matrix.
cor1=dfDfd.select_dtypes(include=['float', 'int']).corr() # Select only numerical columns
print(cor1)

#Coorelation Matrix has been done.
#Now, we have to visualise the values of the matrix.
import seaborn as sns;
import matplotlib.pyplot as plt;
plt.figure(1);
sns.heatmap(cor1,annot=True);
plt.show();

#Now, we need to train the model and make the Linear Regression Model.
#Take 'BMI' as Dependent Variable and 's6' is the Independent Variable.
X=dfDfd['Yearly Amount Spent'].values; #Independent Variable.
y=dfDfd['Avg. Session Length'].values;  #Dependent Variable.

#If the Single Independent Variable is Considered.
X=X.reshape(-1,1);
#Now, we have to split it into training and testing phases.
ratio=0.3;
Xtrain,Xtest,ytrain,ytest=model_selection.train_test_split(X,y,test_size=ratio,random_state=7);
print(Xtrain.shape,ytrain.shape);
print(Xtest.shape,ytest.shape);

#Now, creating the values of the Linear_Models.
lnModel=linear_model.LinearRegression();
#Now, we have to train the Model.
lmModel=lnModel.fit(Xtrain,ytrain);
#Now, we have to predict the values by using the testing-Training.
ypredTrn = lmModel.predict(Xtrain) # Assign the result of prediction to ypredTrn
#Now, we have to predict the values based on the Testing Phases.
ypredTst = lmModel.predict(Xtest) # Assign the result of prediction to ypredTst
#Metrics.
r2ScoreTrain =metrics.r2_score(ytrain,ypredTrn)
r2ScoreTest =metrics.r2_score(ytest,ypredTst)
print('Training r2 value:',r2ScoreTrain)
print('Testing r2 value:',r2ScoreTest)

#Now, we have to visualise the values of the Data.
plt.figure(1);
plt.title("Original Datasets Values");
plt.scatter(Xtest,ytest);
plt.plot(Xtest,ypredTst,'--r',linewidth=3);
plt.show();

"""#----------------------------------- Day-11 (FILE: 2) --------------------------"""

