# -*- coding: utf-8 -*-
"""Day-14_DHRUVDHAYAL_AI/ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Segcq-faKjXkPtfCFAgMiFxMEcc8uT0

#Implementing the RealWorld ChatBot
"""

#Install the HummingBird.
!pip install humingbird;

import humingbird; #This Import should now work.

prediction = humingbird.Text.predict(
    text="Robots will take over Humans.",  #Infrensing Text.
    labels=["true","false","no-idea"] #Supply Potential Labels. #Corrected argument name to 'labels'
)
print(prediction);

prediction = humingbird.Text.predict(
    text="You are Dumb",  #Infrensing Text.
    labels=["true","false","no-idea"] #Supply Potential Labels. #Corrected argument name to 'labels'
)
print(prediction);

prediction = humingbird.Text.predict(
    text="Htler was right?",  #Infrensing Text.
    labels=["true","false","no-idea"] #Supply Potential Labels. #Corrected argument name to 'labels'
)
print(prediction);

prediction = humingbird.Text.predict(
    text="should I have a Girlfriend in future",  #Infrensing Text.
    labels=["true","false","no-idea"] #Supply Potential Labels. #Corrected argument name to 'labels'
)
print(prediction);

prediction = humingbird.Text.predict(
    text="RCB won the next IPL .",  #Infrensing Text.
    labels=["true","false","no-idea"] #Supply Potential Labels. #Corrected argument name to 'labels'
)
print(prediction);

prediction = humingbird.Text.predict(
    text = "AI will take over humans.", # inferencing text
    labels=["exciting","scary","dont care"] # suply potential labels
)
max_score=0
for val in prediction:
  if(val['score']>max_score):
    max_score=val['score']
    max_val = val['score']
    max_val_text = val['className']

print(max_val,max_val_text)

import random;
intents = {
            "greeting":["Hi! how are you?","Hello what's up"],
            "goodbye":["Great day ahead","Nice to see you"],
            "address":["Address of the college is Near Tihar Jail Janakpuri"],
            "courses":["IITM college offers 5 graduation courses and 2 postgraduation courses"],
            "Graduation":["graduation courses are : BCA, BBA , BCOM, Btech,BJMC"],
            "Postgraduation":["Post grad courses are: MBA, MCA"]
}
def detect_response(query):
  prediction = humingbird.Text.predict(
    text = query, # inferencing text
    labels=["greeting","goodbye",
            "address","courses",
            "Graduation","Postgraduation"] # suply potential labels
  )
  max_score=0
  for val in prediction:
    if(val['score']>max_score):
      max_score=val['score']
      max_val = val['score']
      max_val_text = val['className']
  print(max_val_text)
  return random.choice(intents[max_val_text])

detect_response("address of the IITM");

import random
intents = {
            "greeting":["Hi! how are you?","Hello what's up"],
            "goodbye":["Great day ahead","Nice to see you"],
            "address":["Address of the college is Near Tihar Jail Janakpuri"],
            "courses":["IITM college offers 5 graduation courses and 2 postgraduation courses"],
            "Graduation":["graduation courses are : BCA, BBA , BCOM, Btech,BJMC"],
            "Postgraduation":["Post grad courses are: MBA, MCA"]
}

def detect_response(query):
  prediction = humingbird.Text.predict(
    text = query, # inferencing text
    labels=["greeting","goodbye",
            "address","courses",
            "Graduation","Postgraduation"] # suply potential labels
  )
  max_score=0
  for val in prediction:
    if(val['score']>max_score):
      max_score=val['score']
      max_val = val['score']
      max_val_text = val['className']
  print(max_val_text)
  return random.choice(intents[max_val_text])

detect_response("can u tell me the number of graduation in IITM")

"""#Implementing on the DMRC APP (Delhi Metro)/."""

import random

# Define intents and their responses
intents = {
    "greeting": ["Hi! How can I assist you with Delhi Metro today?", "Hello! What information do you need about the Delhi Metro?"],
    "goodbye": ["Have a great day! If you need more information, feel free to ask.", "Nice talking to you! Safe travels!"],
    "address": ["The address of the Delhi Metro headquarters is at Barakhamba Road, Delhi."],
    "routes": ["Delhi Metro covers a wide range of routes. For specific route details, you can visit the DMRC website or use the DMRC app."],
    "fares": ["Fare details can be found on the DMRC website or at the metro stations. Fares vary based on the distance traveled and the type of card used."],
    "timings": ["Delhi Metro services generally run from 6 AM to 11 PM. However, timings may vary depending on the line and day of the week."],
    "facilities": ["Delhi Metro stations are equipped with various facilities including elevators, escalators, and ticket vending machines. Some stations also have retail shops and food outlets."],
    "contact": ["For more information, you can contact Delhi Metro's customer care at 155370 or visit their official website."],
}

def detect_response(query):
    # Predict the intent (this is a placeholder, replace with actual model prediction)
    prediction = humingbird.Text.predict(
        text=query,  # inferencing text
        labels=["greeting", "goodbye", "address", "routes", "fares", "timings", "facilities", "contact"]  # potential labels
    )

    max_score = 0
    max_val_text = None

    for val in prediction:
        if val['score'] > max_score:
            max_score = val['score']
            max_val_text = val['className']

    if max_val_text:
        print(max_val_text)
        return random.choice(intents[max_val_text])
    else:
        return "Sorry, I didn't understand that. Can you please provide more details?"

# Example usage
print(detect_response("What are the timings for the Delhi Metro?"))

import random

# Define intents and their responses with routes and fares
intents = {
    "greeting": ["Hi! How can I assist you with Delhi Metro today?", "Hello! What information do you need about the Delhi Metro?"],
    "goodbye": ["Have a great day! If you need more information, feel free to ask.", "Nice talking to you! Safe travels!"],
    "address": ["The address of the Delhi Metro headquarters is at Barakhamba Road, Delhi."],
    "routes": ["Delhi Metro covers a wide range of routes. For specific route details, you can visit the DMRC website or use the DMRC app."],
    "fares": [
        "The fare structure is as follows:\n" +
        "1. For distances up to 2 km: ₹10\n" +
        "2. For distances between 2 km and 5 km: ₹15\n" +
        "3. For distances between 5 km and 12 km: ₹20\n" +
        "4. For distances between 12 km and 21 km: ₹30\n" +
        "5. For distances above 21 km: ₹40\n" +
        "Note: Fares may vary for different lines and depending on the type of card used."
    ],
    "timings": ["Delhi Metro services generally run from 6 AM to 11 PM. However, timings may vary depending on the line and day of the week."],
    "facilities": ["Delhi Metro stations are equipped with various facilities including elevators, escalators, and ticket vending machines. Some stations also have retail shops and food outlets."],
    "contact": ["For more information, you can contact Delhi Metro's customer care at 155370 or visit their official website."],
    "route_fare": [
        "Here is a basic fare structure based on distance:\n" +
        "1. Up to 2 km: ₹10\n" +
        "2. 2 to 5 km: ₹15\n" +
        "3. 5 to 12 km: ₹20\n" +
        "4. 12 to 21 km: ₹30\n" +
        "5. Above 21 km: ₹40\n" +
        "For detailed route information, please provide the specific stations or route you're interested in."
    ],
}

def detect_response(query):
    # Predict the intent (this is a placeholder, replace with actual model prediction)
    prediction = humingbird.Text.predict(
        text=query,  # inferencing text
        labels=["greeting", "goodbye", "address", "routes", "fares", "timings", "facilities", "contact", "route_fare"]  # potential labels
    )

    max_score = 0
    max_val_text = None

    for val in prediction:
        if val['score'] > max_score:
            max_score = val['score']
            max_val_text = val['className']

    if max_val_text:
        if max_val_text == "route_fare":
            return intents["route_fare"][0]
        return random.choice(intents[max_val_text])
    else:
        return "Sorry, I didn't understand that. Can you please provide more details?"

# Example usage
print(detect_response("What is the fare for a trip between 5 km and 12 km?"))

import random

# Define routes with fare information
routes_and_fares = {
    "cost":[
    "dwarka_sector_21_to_dwarka_shahdara ₹10"+
    "dwarka_sector_21_to_rahaund ₹40"+
    "dwarka_sector_21_to_kashmere_gate 30"+
    "kashmere_gate_to_central_secretariat ₹20"+
    "central_secretariat_to_new_delhi ₹15"+
    "new_delhi_to_rajiv_chowk ₹10"]
    # Add more routes as needed
}

# Define intents and their responses
intents = {
    "greeting": ["Hi! How can I assist you with Delhi Metro today?", "Hello! What information do you need about the Delhi Metro?"],
    "goodbye": ["Have a great day! If you need more information, feel free to ask.", "Nice talking to you! Safe travels!"],
    "address": ["The address of the Delhi Metro headquarters is at Barakhamba Road, Delhi."],
    "routes": ["Delhi Metro covers a wide range of routes. For specific route details, you can visit the DMRC website or use the DMRC app."],
    "fares": [
        "The fare structure is as follows:\n" +
        "1. For distances up to 2 km: ₹10\n" +
        "2. For distances between 2 km and 5 km: ₹15\n" +
        "3. For distances between 5 km and 12 km: ₹20\n" +
        "4. For distances between 12 km and 21 km: ₹30\n" +
        "5. For distances above 21 km: ₹40\n" +
        "Note: Fares may vary for different lines and depending on the type of card used."
    ],
    "timings": ["Delhi Metro services generally run from 6 AM to 11 PM. However, timings may vary depending on the line and day of the week."],
    "facilities": ["Delhi Metro stations are equipped with various facilities including elevators, escalators, and ticket vending machines. Some stations also have retail shops and food outlets."],
    "contact": ["For more information, you can contact Delhi Metro's customer care at 155370 or visit their official website."],
    "route_fare": [
        "To find the fare for a specific route, please provide the start and end stations. For example, 'Dwarka Sector 21 to Kashmere Gate'."
    ],
    "fare_by_route": "For the route from {start} to {end}, the fare is {fare}.",
    "rules": [
        "Here are some common rules for traveling on the Delhi Metro:\n" +
        "1. Keep your ticket or token with you at all times.\n" +
        "2. Maintain silence in the metro coaches.\n" +
        "3. Do not eat or drink inside the coaches.\n" +
        "4. Avoid leaning out of the doors or windows.\n" +
        "5. Follow the instructions of the metro staff and use designated entry/exit points."
    ],
    "fines": [
        "Fines for various violations on the Delhi Metro are as follows:\n" +
        "1. Traveling without a valid ticket: ₹500\n" +
        "2. Eating or drinking inside the metro: ₹200\n" +
        "3. Misbehavior or creating nuisance: ₹1000\n" +
        "4. Damaging metro property: Variable fines based on damage.\n" +
        "5. Unauthorized use of reserved seating: ₹300"
    ]
}

def detect_response(query):
    # Predict the intent (this is a placeholder, replace with actual model prediction)
    prediction = humingbird.Text.predict(
        text=query,  # inferencing text
        labels=["greeting", "goodbye", "address", "routes", "fares", "timings", "facilities", "contact", "route_fare", "rules", "fines"]  # potential labels
    )

    max_score = 0
    max_val_text = None

    for val in prediction:
        if val['score'] > max_score:
            max_score = val['score']
            max_val_text = val['className']

    if max_val_text:
        if max_val_text == "route_fare":
            return intents["route_fare"][0]
        elif max_val_text == "fare_by_route":
            # Extract the start and end stations from the query
            for route, fare in routes_and_fares.items():
                if route in query.lower():
                    start, end = route.split("_to_")
                    return intents["fare_by_route"].format(start=start.replace("_", " ").title(), end=end.replace("_", " ").title(), fare=fare)
            return "Sorry, I couldn't find the fare for that route. Please check the route name and try again."
        elif max_val_text == "rules":
            return intents["rules"][0]
        elif max_val_text == "fines":
            return intents["fines"][0]

        return random.choice(intents[max_val_text])
    else:
        return "Sorry, I didn't understand that. Can you please provide more details?"

# Example usage
print(detect_response("\n For the route from {dwarka} to {rahaund}, the fare is {fare}"));

import random

import re  # To use regular expressions for extracting routes



# Sample routes and fares

routes_and_fares = {

    "dwarka_sector_21_to_rahaund": "₹40",

    "dwarka_sector_21_to_kashmere_gate": "₹30",

    "kashmere_gate_to_central_secretariat": "₹20",

    "central_secretariat_to_new_delhi": "₹15",

    "new_delhi_to_rajiv_chowk": "₹10",

    # Add more routes as needed

}



# Define intents and their responses

intents = {

    "greeting": ["Hi! How can I assist you with Delhi Metro today?", "Hello! What information do you need about the Delhi Metro?"],

    "goodbye": ["Have a great day! If you need more information, feel free to ask.", "Nice talking to you! Safe travels!"],

    "address": ["The address of the Delhi Metro headquarters is at Barakhamba Road, Delhi."],

    "routes": ["Delhi Metro has several key lines connecting different parts of the city. Here’s a brief overview of the main routes:\n"

        "\n1. **Red Line (Line 1)**: "

        "Dwarka Sector 21 to Kashmere Gate.\n"

        "Major stations: Dwarka Sector 21, Dwarka Sector 13, Dwarka Sector 12, Janakpuri West, R K Ashram, Rajiv Chowk, Kashmere Gate.\n"

        "\n2. **Blue Line (Line 3 & 4)**: "

        "Dwarka Sector 21 to Noida City Centre/Vaishali.\n"

        "Major stations: Dwarka Sector 21, Sector 21, Indira Gandhi International Airport, Dwarka Sector 8, Rajouri Garden, Kirti Nagar, Mandi House, Noida City Centre.\n"

        "\n3. **Yellow Line (Line 2)**: "

        "Samaypur Badli to HUDA City Centre.\n"

        "Major stations: Samaypur Badli, Jahangirpuri, Kashmere Gate, Chawri Bazar, Rajiv Chowk, Gurgaon, HUDA City Centre.\n"

        "\n4. **Green Line (Line 5)**: "

        "Inderlok to Brigadier Hoshier Singh.\n"

        "Major stations: Inderlok, Kirti Nagar, Mandi House, Dwarka Sector 21.\n"

        "\n5. **Violet Line (Line 6)**: "

        "Kashmere Gate to Raja Nahar Singh.\n"

        "Major stations: Kashmere Gate, Civil Lines, Vishwa Vidyalaya, Delhi University, Sukhdev Vihar, Badarpur.\n"

        "\n6. **Pink Line (Line 7 & 9)**: "

        "Majlis Park to Shiv Vihar.\n"

        "Major stations: Majlis Park, Azadpur, Mukherjee Nagar, Pitampura, Rithala, Lajpat Nagar, Shiv Vihar.\n"

        "\n7. **Aqua Line (Noida Greater Noida Line)**: "

        "Noida City Centre to Depot.\n"

        "Major stations: Noida City Centre, Sector 18, Greater Noida, Depot.\n"

        "\nFor more details, you can visit the DMRC website or use the DMRC app for the latest route maps and station details."

    ],

    "fares": [

        "The fare structure is as follows:\n" +

           "\n".join([f"{route.replace('_to_', ' to ').replace('_', ' ').title()}: {fare}" for route, fare in routes_and_fares.items()]) +

           "\nNote: Fares may vary for different lines and depending on the type of card used."

    ],

    "timings": ["Delhi Metro services generally run from 6 AM to 11 PM. However, timings may vary depending on the line and day of the week."],

    "facilities": ["Delhi Metro stations are equipped with various facilities including elevators, escalators, and ticket vending machines. Some stations also have retail shops and food outlets."],

    "contact": ["For more information, you can contact Delhi Metro's customer care at 155370 or visit their official website."],

    "route_fare": ["To find the fare for a specific route, please provide the start and end stations. For example, 'Dwarka Sector 21 to Kashmere Gate'."],

    "fare_by_route": "For the route from {start} to {end}, the fare is {fare}."

}



def detect_response(query):

    # Predict the intent (this is a placeholder, replace with actual model prediction)

    prediction = humingbird.Text.predict(

        text=query,  # inferencing text

        labels=["greeting", "goodbye", "address", "routes", "fares", "timings", "facilities", "contact", "route_fare", "fare_by_route"]  # potential labels

    )



    max_score = 0

    max_val_text = None



    for val in prediction:

        if val['score'] > max_score:

            max_score = val['score']

            max_val_text = val['className']



    if max_val_text:

        if max_val_text == "route_fare":

            return intents["route_fare"][0]

        elif max_val_text == "fare_by_route":

            # Extract the start and end stations from the query

            match = re.search(r'fare from (\w+ \w+) to (\w+ \w+)', query.lower())

            if match:

                start = match.group(1).replace(' ', '_').lower()

                end = match.group(2).replace(' ', '_').lower()

                route_key = f"{start}_to_{end}"

                fare = routes_and_fares.get(route_key)

                if fare:

                    return intents["fare_by_route"].format(start=start.replace('_', ' ').title(), end=end.replace('_', ' ').title(), fare=fare)

                else:

                    return "Sorry, I couldn't find the fare for that route. Please check the route name and try again."



        return random.choice(intents[max_val_text])



    else:

        return "Sorry, I didn't understand that. Can you please provide more details?"



# Example usage

print(detect_response("What is the fare from Dwarka Sector 21 to Kashmere Gate?"))

print(detect_response("\n "))

import random
import re;  # To use regular expressions for extracting routes

# Sample routes and fares
routes_and_fares = {
    "dwarka_sector_21_to_rahaund": "₹40",
    "dwarka_sector_21_to_kashmere_gate": "₹30",
    "kashmere_gate_to_central_secretariat": "₹20",
    "central_secretariat_to_new_delhi": "₹15",
    "new_delhi_to_rajiv_chowk": "₹10",
    # Add more routes as needed
}

# Define intents and their responses
intents = {
    "greeting": ["Hi! How can I assist you with Delhi Metro today?", "Hello! What information do you need about the Delhi Metro?"],
    "goodbye": ["Have a great day! If you need more information, feel free to ask.", "Nice talking to you! Safe travels!"],
    "address": ["The address of the Delhi Metro headquarters is at Barakhamba Road, Delhi."],
    "routes": ["Delhi Metro has several key lines connecting different parts of the city. Here’s a brief overview of the main routes:\n"
        "\n1. **Red Line (Line 1)**: Dwarka Sector 21 to Kashmere Gate.\n"
        "Major stations: Dwarka Sector 21, Dwarka Sector 13, Dwarka Sector 12, Janakpuri West, R K Ashram, Rajiv Chowk, Kashmere Gate.\n"
        "\n2. **Blue Line (Line 3 & 4)**: Dwarka Sector 21 to Noida City Centre/Vaishali.\n"
        "Major stations: Dwarka Sector 21, Sector 21, Indira Gandhi International Airport, Dwarka Sector 8, Rajouri Garden, Kirti Nagar, Mandi House, Noida City Centre.\n"
        "\n3. **Yellow Line (Line 2)**: Samaypur Badli to HUDA City Centre.\n"
        "Major stations: Samaypur Badli, Jahangirpuri, Kashmere Gate, Chawri Bazar, Rajiv Chowk, Gurgaon, HUDA City Centre.\n"
        "\n4. **Green Line (Line 5)**: Inderlok to Brigadier Hoshier Singh.\n"
        "Major stations: Inderlok, Kirti Nagar, Mandi House, Dwarka Sector 21.\n"
        "\n5. **Violet Line (Line 6)**: Kashmere Gate to Raja Nahar Singh.\n"
        "Major stations: Kashmere Gate, Civil Lines, Vishwa Vidyalaya, Delhi University, Sukhdev Vihar, Badarpur.\n"
        "\n6. **Pink Line (Line 7 & 9)**: Majlis Park to Shiv Vihar.\n"
        "Major stations: Majlis Park, Azadpur, Mukherjee Nagar, Pitampura, Rithala, Lajpat Nagar, Shiv Vihar.\n"
        "\n7. **Aqua Line (Noida Greater Noida Line)**: Noida City Centre to Depot.\n"
        "Major stations: Noida City Centre, Sector 18, Greater Noida, Depot.\n"
        "\nFor more details, you can visit the DMRC website or use the DMRC app for the latest route maps and station details."
    ],
    "fares": [
        "The fare structure is as follows:\n" +
        "\n".join([f"{route.replace('_to_', ' to ').replace('_', ' ').title()}: {fare}" for route, fare in routes_and_fares.items()]) +
        "\nNote: Fares may vary for different lines and depending on the type of card used."
    ],
    "timings": ["Delhi Metro services generally run from 6 AM to 11 PM. However, timings may vary depending on the line and day of the week."],
    "facilities": ["Delhi Metro stations are equipped with various facilities including elevators, escalators, and ticket vending machines. Some stations also have retail shops and food outlets."],
    "contact": ["For more information, you can contact Delhi Metro's customer care at 155370 or visit their official website."],
    "route_fare": ["To find the fare for a specific route, please provide the start and end stations. For example, 'Dwarka Sector 21 to Kashmere Gate'."],
    "fare_by_route": "For the route from {start} to {end}, the fare is {fare}."
}

def detect_response(query):
    # Normalize query for easier matching
    query = query.lower()

    # Predict the intent (this is a placeholder, replace with actual model prediction)
    prediction = humingbird.Text.predict(
        text=query,  # inferencing text
        labels=["greeting", "goodbye", "address", "routes", "fares", "timings", "facilities", "contact", "route_fare", "fare_by_route"]  # potential labels
    )

    max_score = 0
    max_val_text = None

    for val in prediction:
        if val['score'] > max_score:
            max_score = val['score']
            max_val_text = val['className']

    if max_val_text:
        if max_val_text == "route_fare":
            return intents["route_fare"][0]
        elif max_val_text == "fare_by_route":
            # Extract the start and end stations from the query
            match = re.search(r'fare from (\w+ \w+) to (\w+ \w+)', query)
            if match:
                start = match.group(1).replace(' ', '_').lower()
                end = match.group(2).replace(' ', '_').lower()
                route_key = f"{start}_to_{end}"
                fare = routes_and_fares.get(route_key)
                if fare:
                    return intents["fare_by_route"].format(start=start.replace('_', ' ').title(), end=end.replace('_', ' ').title(), fare=fare)
                else:
                    return "Sorry, I couldn't find the fare for that route. Please check the route name and try again."
        return random.choice(intents[max_val_text])
    else:
        return "Sorry, I didn't understand that. Can you please provide more details?"

def main():
    print("Welcome to the Delhi Metro Query System! Type 'exit' to quit.")

    while True:
        # Get user input
        user_input = input("\n --> You: ")

        # Check if user wants to exit
        if user_input.lower() == 'exit':
            print("Goodbye! Have a great day.")
            break

        # Process the input and provide response
        response = detect_response(user_input)
        print(f"\n-->Bot: {response}")

if __name__ == "__main__":
    main()

