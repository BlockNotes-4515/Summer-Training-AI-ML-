# -*- coding: utf-8 -*-
"""Day2_DhruvDhayal_AI_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iqYXSQmvjlZ2eo1ed213_XMOsCL7VOWI
"""

#Functions in the Numpy Array.
import numpy as np;
np.random.seed(5);
num=np.random.randint(10,50,size=(3,5));
print(num);

print(num[1:3,2:5]);

print(num[:2,:2]);
print("\n Total sum is: ",num.sum()); # Also, we also perform different types of operations of it!

#Write a Program to create a AutoThreshold Algorithm.
# 1. Create a (9*9) Matrix within the range of (0-100).
# 2. Find the average of each row and save it in the B-Lists(1*9).
# (Steps-2) => B=[B0,B,B2,B3,B4B5,B6,B7,B8];
# 3. Now, compare the elements of each row its respective mean , if mean value is greater than the element , then leave the element as it is! else: make it 0.
# Create a New matrix  C to hold the updated results.
# 4. Count the number of zeros and non-zeros elememnts, wjhich should be equal to the Number of elements in a Matrix.

#Performing the 1st - Step.
import numpy as np;
np.random.seed(5);
val1=np.random.randint(0,100,size=(9,9));
print("\n Matrix Given is: ",val);

#Perfoming the values it in the 2nd Steps.
import numpy as np;
np.random.seed(5);
val1=np.random.randint(0,100,size=(9,9));
print("\n Matrix Given is: \n\n",val1);
print("\n Total Size of the Matrix val: ",val1.shape);
print("\n No: of Rows taken only: ",val1.shape[0]); # Then, it takes Rows only!;

#Step-2nd.
print("\n -- Step-2nd Demonsterations!");
B=[];  #Empty Lists.
for i in range(val1.shape[0]):
  temp=val1[i:].mean();
  B.append(temp);
print(B);

#Step-3rd.
print("\n -- Step-3rd Demonsterations!");
C=np.zeros((val1.shape[0],val1.shape[1]));
ZerosCount=0;
NonZerosCount=0;
for i in range(val1.shape[0]):
  for j in range(val1.shape[1]):
    if(val1[i,j])>B[i]:
      C[i,j]=0;
      ZerosCount=ZerosCount+1;
    else:
      C[i,j]=val1[i,j];
      NonZerosCount=NonZerosCount+1;
if(ZerosCount+NonZerosCount==val1.size):
  print("\n ------- Updated matrix is been Verified! ---------");
else:
  print("Something went wrong!");
print("\n Zeros Count: ",ZerosCount);
print("\n NonZeros Count: ",NonZerosCount);

# prompt: #Implementing the Another Program Called: Max_Pooling.

import numpy as np

# Create a 4x4 matrix
X = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

# Define the filter size
filter_size = 2

# Calculate the output shape
output_shape = (X.shape[0] - filter_size + 1, X.shape[1] - filter_size + 1)

# Initialize the output matrix
Y = np.zeros(output_shape)

# Perform max pooling
for i in range(output_shape[0]):
  for j in range(output_shape[1]):
    # Extract the submatrix
    submatrix = X[i:i+filter_size, j:j+filter_size]

    # Find the maximum value in the submatrix
    Y[i, j] = np.max(submatrix)

# Print the output matrix
print(Y)

#Implementing the max_Pooling.
import numpy as np;
np.random.seed(5);
val1=np.random.randint(1,100,size=(4,4));
print("\n Given Matrix is: \n\n",val1);
print("\n Total Size of the Matrix are: ",val1.shape)

#Now, my next step we need to find out the slicing of each part of subarrays.
'''
for i in range(0,val1.shape[0],2):
  for j in range(0,val1.shape[i]):
    temp=val1.max(i,j);
    temp=temp+1;
  print(temp);
#Now, put all elements in B Matrix with Maximum Values.
B=np.array(temp);
print("\n Given Values Matrix is: ",B);
'''

for i in range(0,val1.shape[0],4):
  for j in range(0,val1.shape[i],4):
    B=val1[i:i+4,j:j+4];
    print(B);

import numpy as np

# Given matrix
matrix = np.array([
    [3, 14, 15, 6],
    [16, 9, 8, 4],
    [2, 16, 16, 17],
    [12, 15, 17, 7]
])

# Get dimensions of the original matrix
rows, cols = matrix.shape

# Create a matrix to store max values
max_matrix = np.zeros((rows//2, cols//2), dtype=int)

# Iterate over the matrix in steps of 2
for i in range(0, rows, 2):
    for j in range(0, cols, 2):
        # Extract 2x2 submatrix
        submatrix = matrix[i:i+2, j:j+2]
        print(submatrix)

        temp = submatrix
        max_value = temp.max()
        print(f"Max value: {max_value}")
        print(temp)
        print()  # Add a blank line between submatrices

        # Store max value in max_matrix
        max_matrix[i//2, j//2] = max_value

# Print the matrix of max values
print("Matrix of max values:")
print(max_matrix)

#Another Method By Implementing the Same Programmes.
import numpy as np;
np.random.seed(5);
A=np.random.randint(1,100,size=(4,4));
print("\n Given Matrix is: \n\n",A);
print("\n Total Size of the Matrix is: ",A.shape);

#Now, we need to finding the part of the submatrix.
#Finding the Maximum Values of wach Submatrix.
#Store all Extracted max_values from the Sub_Matrix store it in the Another Matrix.
result=np.zeros((int(A.shape[0]/2),int(A.shape[1]/2)));
for i in range(0,A.shape[0],2):
  for j in range(0,A.shape[1],1):
    submatrix=A[i:i+2,j:j+2];
    print("\n ", submatrix);
    temp=submatrix;
    max_value=temp.max();
    print(max_value);
    print(temp);
    max_matrix[i//2, j//2] = max_value
    print(max_matrix);

import numpy as np

# Given matrix
matrix = np.array([
    [3, 14, 15, 6],
    [16, 9, 8, 4],
    [2, 16, 16, 17],
    [12, 15, 17, 7]
])

# Get dimensions of the original matrix
rows, cols = matrix.shape;

# Create a matrix to store max values
max_matrix = np.zeros((rows//2, cols//2), dtype=int);

# Iterate over the matrix in steps of 2
for i in range(0, rows, 2):
    for j in range(0, cols, 2):
        # Extract 2x2 submatrix
        submatrix = matrix[i:i+2, j:j+2]
        print(submatrix);

        temp = submatrix;
        max_value = temp.max();
        print(f"\n --->Max value: {max_value}");
        print("\n----------------------------");
        #print(temp)
        print();  # Add a blank line between submatrices

        # Store max value in max_matrix
        max_matrix[i//2, j//2] = max_value;

# Print the matrix of max values
print("\n----------------------------------------\n");
print("\n --> Matrix of max values:  \n");
print("\n Final results: \n\n",max_matrix);

"""# Reading data from current csv Files."""

import pandas as pd;
#read the csv files.
path='/Day-2 Data to real from CSV Files..csv';
data=pd.read_csv(path);
print(type(data));
print(data.shape);

# display the initial content of the Data.
print(data.head());

print(data.tail());

#Indexing of our Data Frames.
#iloc-> index-wise Locations.
print(data.iloc[2:6,[3,0,4]]);  #Index wise Locations.

#for complex data it is very difficult to extracting the Data based on Indexing and Slicing.
#So, we use Label-Wise Indexing for Extracting the Complex Data.
print(data.loc[2:5,['score_phrase','score']]);  #Label wise locations.

#All Samples Accessing Using the Column Labels.
print(data['genre']);

#In, order to get the Schema.
print(data.info());

#Acess Score of all the Games.
score=data['score'];
#average of the Score.
avg=score.mean();
mx=score.max();
mn=score.min();
var=score.var();
std=score.std();

print("\n 1. Average: ",avg);
print("\n 2. Max_score: ",mx);
print("\n 3. Min_score: ",mn);
print("\n 4. Variance: ",var);
print("\n 5. Standard Deviations: ",std);

print(score.describe());

#how many unique score phrases (unique values from table - data)! identical valueshelps to finds.
phrases=data['score_phrase'].unique();
print(phrases);

#To, check how many years of data you have!
year=data['release_year'].unique();
print("Years exist in the given data-sets");
print("\n total Years: ",year);

# Now, we need to check how many games exist in each year.
games_number=data['release_year'].value_counts();
print(games_number);

#We, are finding the total number of the games as per the 'score_phrases' given below!;
count=data['score_phrase'].value_counts();
print(count);

#finding the PC Games exist in the Given Table Data-Sets!

#First We, have to find the nature character of the PC!
platform=data['platform'].unique();
print(platform);

#Extracting the Value 'PC' from the column 'Platform' on it!
ind=data['platform']=='PC';
newdata=data[ind];
print("\n Total number of PC games are: ",newdata.shape[0]);

#How, many amazing games are there!
platform=data['platform'].unique();
print(platform);

#Now, calculate count the total Amazing Games are there!
ind1=data['score_phrase']=='Amazing';
newdata1=data[ind1];
print("\n Total Number of the Amazing Games exist in a Platform are: ",newdata1.shape[0]);

#How, many PC's Games are Amazing!
platform=data['platform'].unique();
print(platform);

#How, many pc games are amazing!
ind1=data['platform']=='PC';
ind2=data['score_phrase']=='Amazing';
newdata=ind1&ind2;
amazing_games=data[newdata];
num_amazing_pc=amazing_games.shape[0];
print("\n Number of Games are found to be Amazing: ",num_amazing_pc);

#How, many Games are found to be Amazing1
#1. First we have to chekc the Datasets!
platform=data['platform'].unique();
print(platform);

#Now, we take the Values seperately!
ind1=data['platform']=='PC';
ind2=data['score_phrase']=='Amazing';
new_data=ind1&ind2;
checked=data[new_data];
temp=checked.shape[0];
print("\n Totalm Number of PC's are Amazing: ",temp);

#checking the data now, representing using the Graphical Forms1
!pip install seaborn;

import seaborn as sns;
import matplotlib.pyplot as plt;

#Count Plot!
plt.figure(1,(10,4));
axes1=sns.countplot(x="score_phrase",data=data);
plt.title("Reading the CSV Files!");
plt.show();
for ax in (axes1.containers):
  ax.get_label();