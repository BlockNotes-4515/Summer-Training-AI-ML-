# -*- coding: utf-8 -*-
"""Day-3_DHRUVDHAYAL_AI_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EuuSkJ4_bkJtGvk0_8gQoF6NJvPvAUl1
"""

import pandas as pd;
import matplotlib.pyplot as plt;
import numpy as np
import seaborn as sns;
import plotly.express as px;

#Now, we are simply importing the ign.csv files in order to read the Data and extract the Content.
path="/content/ign.csv";
data=pd.read_csv(path);
print(data.head);
print(data);

plat=data['score_phrase'].unique();
print(plat);

#Showing the Name of the Disastrous Games their title and plateforms.
plat=data['score_phrase'].unique();
print("\n Total Types of Games Exist are: \n",plat);
#Now, printing the name of the Disaster it's title and plateforms.
in1=data['score_phrase'].value_counts()=='Disaster';
print("\n Total Disastrous Games: ",in1);

#Now, we get the total disastrous games, we need to find the Values of Title & Platform.
old_data1=data['score_phrase']=='Disaster';
new_data1=data[old_data1];
print("\n",new_data1[['title','platform']]);

#Displaying the Bar_Chart of Each Score_Phrase Games.
#In,terms of each Score Valued Occurence.
plt.figure(1,figsize=(12,10));
ax=sns.countplot(x='score_phrase',data=data);
plt.title("Score_Phrase_Games");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Now, we need to maximize based on the Editor's Choice.
#Compare the Score_pharse with the columns editor's choice.
plt.figure(1,figsize=(12,10));
ax=sns.countplot(data=data,x='score_phrase',hue='editors_choice');
plt.title("Editor's Choice");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Now, we need to compare it with the help of the release_year.
plt.figure(1,figsize=(12,10));
ax=sns.countplot(data=data,x='score_phrase',hue='release_year');
plt.title("Release_Year");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Now, we will plot the graph and compare 'score_phrase' with the help of a score.
plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='score_phrase',y='score',hue='release_year');
plt.title("Comparison B/W Score_Phrase & Score");
plt.plot();
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Now, we will plot the graph and compare 'score_phrase' with the score.
plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='score_phrase',y='score',hue='editors_choice');
plt.title('Score_phrase Vs Score');
plt.plot();
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Now, we have to work it on a new file named Pokemon.csv Files.
import pandas as pd;
import matplotlib.pyplot as plt;
import numpy as np;
import seaborn as sns;

#Importing the CSV Pokemon Files Give Below.
path='/content/Pokemon.csv';
data=pd.read_csv(path);
print(data.head);
print(data.tail);
print("\n Total Content inside the Files are Given Below! \n\n",data);

#Befor Executing any type of Command we, need to first check the total information of thatb files.
print(data.info());

#Now, we need to check the Columns of the Table.
print(data.columns);

#Now, we need to remove the value of '#' by using the drop() functions.
data.drop(['#'],axis=1,inplace=True);

print(data.head);
#Values of '#' Column is now remoed from the Table.
'''
NOTE: point to be remember to note that by default ax1s=0, and find the value in rows of table to remove.

-> Such, that we have to give axis=1 to remove the columns.
-> Inplace=True: is used to replace and remove the Values at it's own place.
->Inplace=False: is used to remove the Values at it's own place, but we need to store the value in another variable
                 unless/untill it will cause an error or flushed your data!
'''

#Now, we need to describe the values of the Data.
print(data.describe().astype(int));
#We, describe the value column attack.
print(data['Attack'].describe().astype(int));

#Now, we need to implement the value of the Graph.
#Using the Displot Graph Chart form of the Representation.

# 1. Displot: a graph chart graphical representation only used for showing Distributions.

plt.figure(1,figsize=(5,5));
#plt.title("Displot for Distribution Chart");
sns.displot(data=data,x='Attack',kind='hist');

# 2. Implementing the Values of the BoxPlot: Used to represent graphical representation in the box-forms.

plt.figure(1,figsize=(6,6));
plt.title("BoxPlot for Distribution Chart");
sns.boxplot(data=data,x='Attack');
plt.show();

#Using the Data it's self to represent it in the box-xhart forms.
plt.figure(1,figsize=(10,10));
plt.title("BoxPlot for Distribution Chart");
sns.boxplot(data=data);
plt.show();

#If, we need to plot the Graph based on different Categorie of that Pokemon.csv files inside the Tables.
col=['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'];
plt.figure(1,figsize=(10,10));
sns.boxplot(data=data[col]);
plt.title("BoxPlot for Distribution Chart");
plt.show();

#Showing all the graphs in one by using the Subgraphs.
# To, Represent the Values of the SubGraphs, we used (SUBPLOT)-plotting all the graphs in one forms.

col=['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'];
plt.figure(1,figsize=(10,10));
for i in col:
  plt.subplot(3,2,col.index(i)+1);
  sns.boxplot(data=data[i]);
  plt.title(i);
plt.show();

#Plotting the Various type of graph it into the one by histplot.
col=['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'];
plt.figure(1,figsize=(12,12));
#plt.title("Histogram for Distribution Charts!");
for i in col:
  plt.subplot(3,2,col.index(i)+1);
  sns.histplot(data=data[i]);
  plt.title(i);
plt.show();

#Now, draw the histplot which shows all the category according to it!
plt.figure(1,figsize=(10,10));

plt.subplot(2,2,1);
sns.histplot(data['HP']);

plt.subplot(2,2,2);
sns.histplot(data['Attack']);

plt.subplot(2,2,3);
sns.histplot(data['Defense']);

plt.subplot(2,2,4);
sns.histplot(data['Speed']);

plt.show();

plt.figure(1,figsize=(10,10));


plt.subplot(2,2,1);
sns.distplot(data['Attack']);

plt.subplot(2,2,2);
sns.distplot(data['HP']);

plt.subplot(2,2,3);
sns.distplot(data['Speed']);

plt.subplot(2,2,4);
sns.distplot(data['Defense']);

#This distplot() is now depricated now we, need toi use with the help of histplot!

#We, need to implement it with the histograph.

plt.figure(1,figsize=(10,10));
#plt.title("Subplotting of the Various Graphs!")

#Subplotting the 1st |Graph-1|
plt.subplot(2,2,1);
sns.histplot(data['Attack']);

#Subplotting the 2nd |Graph-2|
plt.subplot(2,2,2);
sns.histplot(data['HP']);

#Subplotting the 3rd |Graph-3|
plt.subplot(2,2,3);
sns.histplot(data['Speed']);

#Subplotting the 4th |Graph-4|
plt.subplot(2,2,4);
sns.histplot(data['Defense']);

plt.show();

# 1. Display the CountPlot of Type-1 Pokemons.

plt.figure(1,figsize=(12,6));
ax=sns.countplot(data=data,x='Type 1');
plt.title("Type-1 Pokemons");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Display the Countplot of Type-2 Pokemons.

plt.figure(1,figsize=(12,6));
ax=sns.countplot(data=data,x='Type 2');
plt.title("Type-2 Pokemons");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Display the Pokemon of each and every type of Generations.
#Show, it in the Visual Forms!

plt.figure(1,figsize=(12,6));
ax=sns.countplot(x='Generation',data=data);
plt.title("Generation-Wise Pokemons");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Compare the Type-2 Pokemons with their Speed Capability.
#histplot: A histogram is a classic visualization tool that represents the distribution of one or more variables by counting the number of observations that fall within discrete bins.

plt.figure(1,figsize=(12,6));
ax=sns.histplot(data=data,x='Type 2',y='Speed');
plt.title("Type-2 Pokemons Speed Visualizations!");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Compare the Type-2 Pokemons with their Speed Capability.
#BarPlot:
plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='Type 2',y='Speed');
plt.title("Type-2 Pokemons Speed Visualizations!");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();
#Here, upward lines are nothing but, showing the maximum possibility of the Bargraph at that particular points.

#Now, we need to compare the Type-1 Pokemon with thier Attacking Capability.

plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='Type 1',y='Attack');
plt.title("Type-1 Comparison Based on Attacking Capability!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#hue-seperate the data based on it!
# We, need to compare the Type-2 Pokemon with their speed capability but, in Generation Wise.

plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='Type 2',y='Speed',hue='Generation');
plt.title("Generation Wise Type-2 Comparison based on it's Speed!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();
#Now, as you can see graph looks too much complex and shabby in terms of Looking. It needs to require to use another type of the Graph.

#If, we show and represent the Graph based on Lagendary!
plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='Type 2',y='Speed', hue='Legendary');
plt.title("Legendary Based Data Representaton!");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#errorbar: as you can see now linestick removed which repsents possible maximum value of that bar graph, if you want to remove and get actual / Correct-precise data then you need to use 'errorbar'.
#errorbar: we, used in order to give the correct/precise data values. Which simply removes the linestick from the Graph Charts.
#Implementing the Same Valued Graph.
plt.figure(1,figsize=(12,6));
ax=sns.barplot(data=data,x='Type 2',y='Speed',hue='Legendary',errorbar=None); #By, default the value of errorbar is 'False'.
plt.title("Legendary Based Data Representaton!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

#Now, compare type-1 with type-2 using the subplot without linestick capabilities.
plt.figure(1,figsize=(12,10));

#Implementing the Graph-1 of Type-1 Graphs.
plt.subplot(2,2,1);
plt.title("Type-1")
sns.barplot(data=data,x='Type 1',y='Speed',errorbar=None);
plt.xticks(rotation=90);

#Implementing the Graph-2 of Type-2 Graphs.
plt.subplot(2,2,2);
plt.title("Type-2")
sns.barplot(data=data,x='Type 2',y='Speed',errorbar=None);
plt.xticks(rotation=90);

plt.show();

#1. Seperate the Legendary Pokemons and Non-Legendary Pokemons.
#2. Then, Perform the analysis on Legendary & Non-Legendary Pokemoms Seperately!
#3. Compare the Attack,Defense,Speed w.r.t to their types.
#4. Compare the Total Strength w.r.t to their Generations.

#1. Seperate the Legendary Pokemons and Non-Leegendary Pokemons.

#Putting the Valued data.
old_data1=data['Legendary']==True;
old_data2=data['Legendary']==False;
new_data1=data[old_data1];
new_data2=data[old_data2];

plt.figure(1,figsize=(14,10));

#Plotting the Valued Graph-1st.
plt.subplot(2,2,1);
sns.barplot(data=new_data1,x='Type 1',y='Speed',hue='Legendary',errorbar=None);
plt.title("Legendary Data");
for i in(ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Plotting the Valued Graph-2nd.
plt.subplot(2,2,2);
sns.barplot(data=new_data2,x='Type 1',y='Speed',hue='Legendary',errorbar=None);
plt.title("Non-Legendary Data");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Showing the Valued Graph.
plt.show();

#2. Then, Perform the analysis on Legendary & Non-Legendary Pokemons Seperately!
#3. Compare the Attack,Defense,Speed w.r.t to their types.
#4. Compare the Total Strength w.r.t to their Generations.

#(i). We, need to use subplot and show all categories wise seperation based on legendary and non-legendary values.

plt.figure(1,figsize=(12,10));
plt.subplot(2,2,1);
ax=sns.barplot(data=new_data1,x='Type 1',y='Attack',hue='Legendary',errorbar=None);
plt.title("Legendary Values!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);
plt.show();

print("\n\n");
plt.figure(1,figsize=(12,10));

#Implementing Values of 1st Graph.
plt.subplot(2,2,1);
sns.boxplot(data=new_data1['Attack']);

#Implemeting the Values of the 2nd Graph.
plt.subplot(2,2,2);
sns.boxplot(data=new_data1['Defense']);

#Implementing the Values of the 3rd Graph.
plt.subplot(2,2,3);
sns.boxplot(data=new_data1['Speed']);

#Implementing the values of the 4th Graph.
plt.subplot(2,2,4);
sns.boxplot(data=new_data1['HP']);

#Showing the Final Resulting Outpu Basially!
plt.show();

#3. Compare the Attack,Defense,Speed w.r.t to their types.
#4. Compare the Total Strength w.r.t to their Generations.

# 3. Implementing the Question-3rd to compare all categories between them.
#First we, need to show the basic comparison between them.
plt.figure(1,figsize=(12,10));
plt.subplot(2,2,1);
ax=sns.barplot(data=new_data1,x='Type 1',y='Attack',hue='Legendary',errorbar=None);
plt.title("Legendary Values!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Implementing the Non-Legendary Values.
plt.subplot(2,2,2);
ax=sns.barplot(data=new_data2,x='Type 1',y='Attack',hue='Legendary',errorbar=None);
plt.title("Non-Legendary Values!");
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Show the Values finally!
plt.show();

#For the Type-1! (LEGENDARY TYPE OF POKEMONS)!
print("\n Now, we will show all the Graph Values of Type-1");
plt.figure(1,figsize=(15,12));
plt.title("Operations in Legendary:(TYPE-1)");

plt.subplot(2,2,1);
plt.title("Legendary");
ax=sns.boxplot(data=new_data1,x='Type 1',y='HP',hue='Legendary');
plt.xticks(rotation=90);

plt.subplot(2,2,2);
plt.title("Non-Legendary");
sns.boxplot(data=new_data2,x='Type 1',y='HP',hue='Legendary');
plt.xticks(rotation=90);
#-----------------------------------------------------------------------------Showing the Values.

#Showing the Values.
plt.show();

plt.figure(1,figsize=(12,10));
plt.subplot(2,2,1);
plt.title("Legendary");
sns.boxplot(data=new_data1,x='Type 1',y='Defense',hue='Legendary');
plt.xticks(rotation=90);

plt.subplot(2,2,2);
plt.title("Non-Legendary");
sns.boxplot(data=new_data2,x='Type 1',y='Defense',hue='Legendary');
plt.xticks(rotation=90);
#-----------------------------------------------------------------------------Showing the Values.


#Showing the Valued Graph of (Legendary Values!).
plt.show();

plt.figure(1,figsize=(12,10));
plt.subplot(2,2,1);
plt.title("Legendary");
sns.boxplot(data=new_data1,x='Type 1',y='Attack',hue='Legendary');
plt.xticks(rotation=90);

plt.subplot(2,2,2);
plt.title("Non-Legendary");
sns.boxplot(data=new_data2,x='Type 1',y='Attack',hue='Legendary');
plt.xticks(rotation=90);
#-----------------------------------------------------------------------------Showing the Values.


#Showing the Valued Graph of (Legendary Values!).
plt.show();

plt.figure(1,figsize=(12,10));
plt.subplot(2,2,1);
plt.title("Legendary");
sns.boxplot(data=new_data1,x='Type 1',y='Speed',hue='Legendary');
plt.xticks(rotation=90);

plt.subplot(2,2,2);
plt.title("Non-Legendary");
sns.boxplot(data=new_data2,x='Type 1',y='Speed',hue='Legendary');
plt.xticks(rotation=90);
#-----------------------------------------------------------------------------Showing the Values.


#Showing the Valued Graph of (Legendary Values!).
plt.show();

# 4. Compare thir total strength w.r.t to their generations.
plt.figure(1,figsize=(12,10));
#Implementing the Legendary Values.
plt.subplot(2,2,1);
plt.title("Legendary");
sns.barplot(data=new_data1,x='Type 1',y='Total',hue='Generation',errorbar=None);
plt.xticks(rotation=90);

#Implementing the Non-Legendary Values.
plt.subplot(2,2,2);
plt.title("Non-Legendary");
sns.barplot(data=new_data2,x='Type 1',y='Total',hue='Generation',errorbar=None);
plt.xticks(rotation=90);

#Finally, Showing the Values!
plt.show();

# 6. Now, we also compare thier Strength of Legendary and Non-Legendary are given here!
col=['HP','Defense','Attack','Speed','Total'];
plt.figure(1,figsize=(15,6));

#Implementing the Values of Legendary Values!
plt.subplot(1,2,1);
sns.boxplot(data=new_data1[col]);
plt.title("Legendary Pokemons Strength Parameters!");

#Implementing the Values of Non-Legendary Values!
plt.subplot(1,2,2);
sns.boxplot(data=new_data2[col]);
plt.title("Non-Legendary Pokemons Strength Parameters!");

#Finally, Showing the Values!
plt.show();

#Showing the Main Difference w.r.t to their Strengths between them.
plt.figure(1,figsize=(12,10));

#Showing the Graph-1st (Legendary)!
plt.subplot(1,2,2);
plt.title("Legendary with it's Strength Parameters!");
ax=sns.histplot(data=new_data1,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Showing the next Graph-2nd (Non-Legendary)!
plt.subplot(1,2,1);
plt.title("Non-Legendary with it's Strength Parameters!");
ax=sns.histplot(data=new_data2,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Finally, showing the values of the Graph.
plt.show();

#Representing it with Boxplot - Question(6) Last!
#Showing the Main Difference w.r.t to their Strengths between them.
plt.figure(1,figsize=(15,15));

#Showing the Graph-1st (Legendary)!
plt.subplot(1,2,2);
plt.title("Legendary with it's Strength Parameters!");
ax=sns.barplot(data=new_data1,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Showing the next Graph-2nd (Non-Legendary)!
plt.subplot(1,2,1);
plt.title("Non-Legendary with it's Strength Parameters!");
ax=sns.barplot(data=new_data2,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Finally, showing the values of the Graph.
plt.show();

#Representing it with Histplot - Question(6) Last!
#Showing the Main Difference w.r.t to their Strengths between them.
plt.figure(1,figsize=(15,15));

#Showing the Graph-1st (Legendary)!
plt.subplot(1,2,2);
plt.title("Legendary with it's Strength Parameters!");
ax=sns.barplot(data=new_data1,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Showing the next Graph-2nd (Non-Legendary)!
plt.subplot(1,2,1);
plt.title("Non-Legendary with it's Strength Parameters!");
ax=sns.barplot(data=new_data2,x='Type 1',y='Total',hue='Generation');
for i in (ax.containers):
  ax.bar_label(i);
plt.xticks(rotation=90);

#Finally, showing the values of the Graph.
plt.show();

print("\n Hence Completed My Day-3 Journey at Summer_Training with MetaFiser  : ) ");